[{"E:\\MIKE\\React\\practice\\facebook-nav\\src\\index.js":"1","E:\\MIKE\\React\\practice\\facebook-nav\\src\\App.js":"2"},{"size":219,"mtime":1606520858429,"results":"3","hashOfConfig":"4"},{"size":4123,"mtime":1606522799281,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tm7e0u",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"E:\\MIKE\\React\\practice\\facebook-nav\\src\\index.js",[],"E:\\MIKE\\React\\practice\\facebook-nav\\src\\App.js",["11","12"],"import \"./index.css\";\nimport { ReactComponent as BellIcon } from \"./icons/bell.svg\";\nimport { ReactComponent as MessengerIcon } from \"./icons/messenger.svg\";\nimport { ReactComponent as CaretIcon } from \"./icons/caret.svg\";\nimport { ReactComponent as PlusIcon } from \"./icons/plus.svg\";\nimport { ReactComponent as CogIcon } from \"./icons/cog.svg\";\nimport { ReactComponent as ChevronIcon } from \"./icons/chevron.svg\";\nimport { ReactComponent as ArrowIcon } from \"./icons/arrow.svg\";\nimport { ReactComponent as BoltIcon } from \"./icons/bolt.svg\";\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n\nfunction App() {\n  return (\n    <Navbar>\n      <NavItem icon={<PlusIcon />} />\n      <NavItem icon={<BellIcon />} />\n      <NavItem icon={<MessengerIcon />} />\n\n      <NavItem icon={<CaretIcon />}>\n        <DropdownMenu></DropdownMenu>\n      </NavItem>\n    </Navbar>\n  );\n}\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar\">\n      <ul className=\"navbar-nav\">{props.children}</ul>\n    </nav>\n  );\n}\n\nfunction NavItem(props) {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <li className=\"nav-item\">\n      <a href=\"#\" className=\"icon-button\" onClick={() => setOpen(!open)}>\n        {props.icon}\n      </a>\n\n      {open && props.children}\n    </li>\n  );\n}\n\nfunction DropdownMenu() {\n  const [activeMenu, setActiveMenu] = useState(\"main\");\n  const [menuHeight, setMenuHeight] = useState(null);\n  const dropdownRef = useRef(null);\n\n  useEffect(() => {\n    setMenuHeight(dropdownRef.current?.firstChild.offsetHeight);\n  }, []);\n\n  function calcHeight(el) {\n    const height = el.offsetHeight;\n    setMenuHeight(height);\n  }\n\n  function DropdownItem(props) {\n    return (\n      <a\n        href=\"#\"\n        className=\"menu-item\"\n        onClick={() => props.goToMenu && setActiveMenu(props.goToMenu)}\n      >\n        <span className=\"icon-button\">{props.leftIcon}</span>\n        {props.children}\n        <span className=\"icon-right\">{props.rightIcon}</span>\n      </a>\n    );\n  }\n\n  return (\n    <div className=\"dropdown\" style={{ height: menuHeight }} ref={dropdownRef}>\n      <CSSTransition\n        in={activeMenu === \"main\"}\n        timeout={500}\n        classNames=\"menu-primary\"\n        unmountOnExit\n        onEnter={calcHeight}\n      >\n        <div className=\"menu\">\n          <DropdownItem>My Profile</DropdownItem>\n          <DropdownItem\n            leftIcon={<CogIcon />}\n            rightIcon={<ChevronIcon />}\n            goToMenu=\"settings\"\n          >\n            Settings\n          </DropdownItem>\n          <DropdownItem\n            leftIcon=\"🦧\"\n            rightIcon={<ChevronIcon />}\n            goToMenu=\"animals\"\n          >\n            Animals\n          </DropdownItem>\n        </div>\n      </CSSTransition>\n\n      <CSSTransition\n        in={activeMenu === \"settings\"}\n        timeout={500}\n        classNames=\"menu-secondary\"\n        unmountOnExit\n        onEnter={calcHeight}\n      >\n        <div className=\"menu\">\n          <DropdownItem goToMenu=\"main\" leftIcon={<ArrowIcon />}>\n            <h2>My Tutorial</h2>\n          </DropdownItem>\n          <DropdownItem leftIcon={<BoltIcon />}>HTML</DropdownItem>\n          <DropdownItem leftIcon={<BoltIcon />}>CSS</DropdownItem>\n          <DropdownItem leftIcon={<BoltIcon />}>JavaScript</DropdownItem>\n          <DropdownItem leftIcon={<BoltIcon />}>Awesome!</DropdownItem>\n        </div>\n      </CSSTransition>\n\n      <CSSTransition\n        in={activeMenu === \"animals\"}\n        timeout={500}\n        classNames=\"menu-secondary\"\n        unmountOnExit\n        onEnter={calcHeight}\n      >\n        <div className=\"menu\">\n          <DropdownItem goToMenu=\"main\" leftIcon={<ArrowIcon />}>\n            <h2>Animals</h2>\n          </DropdownItem>\n          <DropdownItem leftIcon=\"🦘\">Kangaroo</DropdownItem>\n          <DropdownItem leftIcon=\"🐸\">Frog</DropdownItem>\n          <DropdownItem leftIcon=\"🦋\">Horse?</DropdownItem>\n          <DropdownItem leftIcon=\"🦔\">Hedgehog</DropdownItem>\n        </div>\n      </CSSTransition>\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"13","severity":1,"message":"14","line":41,"column":7,"nodeType":"15","endLine":41,"endColumn":74},{"ruleId":"13","severity":1,"message":"14","line":66,"column":7,"nodeType":"15","endLine":70,"endColumn":8},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]